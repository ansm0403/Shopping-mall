# 개발 환경용 Dockerfile (핫 리로드 지원)
FROM node:20-slim AS base
WORKDIR /app

# 네이티브 모듈 빌드를 위한 필수 패키지 설치
RUN apt-get update && apt-get install -y \
    python3 \
    make \
    g++ \
    libc6-dev \
    && rm -rf /var/lib/apt/lists/*

# Yarn v4 설치 및 설정
RUN corepack enable && corepack prepare yarn@4.10.3 --activate

# Stage 1: Dependencies 설치
FROM base AS deps
COPY package.json yarn.lock .yarnrc.yml ./
COPY .yarn ./.yarn

# yarn install 최적화 - 네이티브 모듈 빌드 설정
ENV YARN_CACHE_FOLDER=/tmp/yarn-cache
RUN mkdir -p $YARN_CACHE_FOLDER && \
    yarn config set enableGlobalCache false && \
    yarn install --network-timeout 1000000

# Stage 2: Backend 개발 환경
FROM base AS backend-dev
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# 백엔드 빌드 디렉토리 생성 및 초기 빌드
RUN mkdir -p /app/backend/dist && \
    yarn nx build backend --configuration=development

# 개발용 포트 노출 (백엔드: 4000)
EXPOSE 4000

# 백엔드 개발 서버 실행
CMD ["sh", "-c", "yarn nx build backend --configuration=development --skip-nx-cache && node /app/backend/dist/main.js"]

# Stage 3: Frontend 개발 환경
FROM base AS frontend-dev
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# 개발용 포트 노출 (프론트엔드: 3000)
EXPOSE 3000

# 프론트엔드 개발 서버 실행
CMD ["sh", "-c", "yarn nx dev frontend --skip-nx-cache"]
