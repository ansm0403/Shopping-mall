# 개발 환경용 Docker Compose 파일
version: '3.8'

services:
  # PostgreSQL 데이터베이스 (개발용)
  postgres:
    image: postgres:18-alpine
    restart: unless-stopped
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./backend/postgres-data:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: sangmoon
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: sangmoon
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sangmoon"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 개발 환경용 백엔드 (핫 리로드 지원)
  backend-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: backend-dev
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.nx/cache
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=development
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=sangmoon
      - DATABASE_PASSWORD=postgres
      - DATABASE_NAME=sangmoon
      - NX_CACHE=false
      - NX_DAEMON=false
    depends_on:
      postgres:
        condition: service_healthy    
    command: ["sh", "-c", "cd /app && yarn nx build backend --configuration=development --skip-nx-cache && node /app/backend/dist/main.js"]

  # 개발 환경용 프론트엔드 (핫 리로드 지원)
  frontend-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: frontend-dev
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.nx/cache
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:4000
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
      - NX_DAEMON=false
      - CHOKIDAR_INTERVAL=1000
      - CHOKIDAR_BINARY_INTERVAL=1000
    depends_on:
      - backend-dev
    command: ["sh", "-c", "cd /app && yarn nx dev frontend --skip-nx-cache"]

volumes:
  postgres_dev_data:
    driver: local

networks:
  default:
    name: shopping-mall-dev-network
